import{t as ba,a as va}from"./woIyr73P.js";import"./CYm51p4s.js";import{s as a,P as wa,c as e,b as s,n as ya}from"./BfQri65O.js";import{h as n}from"./yyGB2fVy.js";const xa={title:"Mastering Command Line Basics: A Beginner's Guide",description:"Learn the essential command line skills every developer should know. This beginner-friendly guide covers navigation, file operations, permissions, and practical tips to help you become comfortable and efficient with the terminal.",date:"2024-03-20T00:00:00.000Z",published:!0},{title:Ma,description:Aa,date:Da,published:Fa}=xa;var _a=ba('<h1 id="mastering-command-line-basics-a-beginners-guide">Mastering Command Line Basics: A Beginner’s Guide</h1> <h2 id="introduction">Introduction</h2> <p>For many new developers, the command line can seem intimidating—a black screen with a blinking cursor, waiting for you to type mysterious commands. However, becoming comfortable with the command line is an essential skill that will make you more efficient and open up powerful capabilities that aren’t available through graphical interfaces.</p> <p>In this guide, I’ll walk you through the fundamental command line skills every developer should know, with practical examples that you can try right away.</p> <h2 id="why-learn-the-command-line">Why Learn the Command Line?</h2> <p>Before diving into commands, let’s understand why the command line is worth learning:</p> <ol><li><strong>Efficiency</strong>: Many tasks are faster to perform with commands than clicking through interfaces</li> <li><strong>Automation</strong>: You can script repetitive tasks to save time</li> <li><strong>Remote access</strong>: You can work on remote servers where graphical interfaces aren’t available</li> <li><strong>Developer tools</strong>: Many development tools are primarily or exclusively used via command line</li> <li><strong>Understanding</strong>: It gives you a deeper understanding of how your computer works</li></ol> <h2 id="getting-started">Getting Started</h2> <h3 id="accessing-the-terminal">Accessing the Terminal</h3> <p><strong>On macOS</strong>:</p> <ul><li>Open Spotlight (Cmd+Space) and type “Terminal”</li> <li>Or find it in Applications → Utilities → Terminal</li></ul> <p><strong>On Windows</strong>:</p> <ul><li>Windows has Command Prompt and PowerShell, but for a Unix-like experience, I recommend installing <a href="https://docs.microsoft.com/en-us/windows/wsl/install" rel="nofollow">Windows Subsystem for Linux (WSL)</a> or <a href="https://gitforwindows.org/" rel="nofollow">Git Bash</a></li></ul> <p><strong>On Linux</strong>:</p> <ul><li>Usually Ctrl+Alt+T or find Terminal in your applications menu</li></ul> <h3 id="understanding-the-prompt">Understanding the Prompt</h3> <p>When you open the terminal, you’ll see something like:</p> <pre class="language-undefined"><!></pre> <p>This tells you:</p> <ul><li>Your username</li> <li>The hostname (computer name)</li> <li>Your current directory (<code>~</code> is shorthand for your home directory)</li> <li><code>$</code> indicates you’re using a regular user account (not root)</li></ul> <p>The prompt is where you’ll type commands.</p> <h2 id="essential-navigation-commands">Essential Navigation Commands</h2> <h3 id="1-pwd-print-working-directory">1. pwd (Print Working Directory)</h3> <p>The <code>pwd</code> command shows your current location in the file system:</p> <pre class="language-bash"><!></pre> <p>Output might look like:</p> <pre class="language-undefined"><!></pre> <h3 id="2-ls-list">2. ls (List)</h3> <p>The <code>ls</code> command lists files and directories in your current location:</p> <pre class="language-bash"><!></pre> <p>Common options:</p> <pre class="language-bash"><!></pre> <p>Example output of <code>ls -l</code>:</p> <pre class="language-undefined"><!></pre> <p>This shows:</p> <ul><li>File permissions</li> <li>Number of links</li> <li>Owner</li> <li>Group</li> <li>Size</li> <li>Last modified date</li> <li>Name</li></ul> <h3 id="3-cd-change-directory">3. cd (Change Directory)</h3> <p>The <code>cd</code> command lets you navigate between directories:</p> <pre class="language-bash"><!></pre> <h2 id="working-with-files-and-directories">Working with Files and Directories</h2> <h3 id="1-mkdir-make-directory">1. mkdir (Make Directory)</h3> <p>Create new directories:</p> <pre class="language-bash"><!></pre> <h3 id="2-touch">2. touch</h3> <p>Create empty files or update timestamps of existing files:</p> <pre class="language-bash"><!></pre> <h3 id="3-cp-copy">3. cp (Copy)</h3> <p>Copy files and directories:</p> <pre class="language-bash"><!></pre> <h3 id="4-mv-moverename">4. mv (Move/Rename)</h3> <p>Move or rename files and directories:</p> <pre class="language-bash"><!></pre> <h3 id="5-rm-remove">5. rm (Remove)</h3> <p>Delete files and directories (be careful, there’s no recycle bin!):</p> <pre class="language-bash"><!></pre> <p>⚠️ <strong>Warning</strong>: Be extremely careful with <code>rm -rf</code> as it can delete everything without asking!</p> <h3 id="6-cat-concatenate">6. cat (Concatenate)</h3> <p>Display file contents:</p> <pre class="language-bash"><!></pre> <h3 id="7-less">7. less</h3> <p>View file contents with pagination (useful for large files):</p> <pre class="language-bash"><!></pre> <p>Navigation in less:</p> <ul><li>Space: Next page</li> <li>b: Previous page</li> <li>/pattern: Search for “pattern”</li> <li>n: Next search result</li> <li>q: Quit</li></ul> <h2 id="file-permissions">File Permissions</h2> <p>In Unix-like systems, files and directories have permissions that control who can read, write, or execute them.</p> <h3 id="understanding-permission-notation">Understanding Permission Notation</h3> <p>When you run <code>ls -l</code>, you’ll see something like:</p> <pre class="language-undefined"><!></pre> <p>The first 10 characters represent:</p> <ul><li>1st character: File type (<code>-</code> for regular file, <code>d</code> for directory)</li> <li>2-4th characters: Owner permissions (read, write, execute)</li> <li>5-7th characters: Group permissions</li> <li>8-10th characters: Others permissions</li></ul> <p>Where:</p> <ul><li><code>r</code> = read permission</li> <li><code>w</code> = write permission</li> <li><code>x</code> = execute permission</li> <li><code>-</code> = no permission</li></ul> <h3 id="chmod-change-mode">chmod (Change Mode)</h3> <p>Change file permissions:</p> <pre class="language-bash"><!></pre> <p>Octal notation:</p> <ul><li>4 = read</li> <li>2 = write</li> <li>1 = execute</li></ul> <p>Common permission combinations:</p> <ul><li>755 (rwxr-xr-x): Owner can read/write/execute, others can read/execute</li> <li>644 (rw-r–r–): Owner can read/write, others can read</li> <li>700 (rwx------): Owner can read/write/execute, no permissions for others</li></ul> <h2 id="redirecting-output">Redirecting Output</h2> <h3 id="redirecting-to-files">Redirecting to Files</h3> <pre class="language-bash"><!></pre> <h3 id="piping">Piping</h3> <p>Pipes (<code>|</code>) connect the output of one command to the input of another:</p> <pre class="language-bash"><!></pre> <h2 id="useful-text-processing-commands">Useful Text Processing Commands</h2> <h3 id="1-grep-global-regular-expression-print">1. grep (Global Regular Expression Print)</h3> <p>Search for patterns in files:</p> <pre class="language-bash"><!></pre> <h3 id="2-head-and-tail">2. head and tail</h3> <p>View the beginning or end of a file:</p> <pre class="language-bash"><!></pre> <h3 id="3-wc-word-count">3. wc (Word Count)</h3> <p>Count lines, words, and characters:</p> <pre class="language-bash"><!></pre> <h3 id="4-sort">4. sort</h3> <p>Sort lines in a file:</p> <pre class="language-bash"><!></pre> <h3 id="5-uniq">5. uniq</h3> <p>Filter out duplicate lines (works best after sorting):</p> <pre class="language-bash"><!></pre> <h2 id="finding-files">Finding Files</h2> <h3 id="1-find">1. find</h3> <p>Search for files and directories:</p> <pre class="language-bash"><!></pre> <h3 id="2-which">2. which</h3> <p>Find the location of a command:</p> <pre class="language-bash"><!></pre> <h2 id="command-history-and-shortcuts">Command History and Shortcuts</h2> <h3 id="history">History</h3> <p>View and reuse previous commands:</p> <pre class="language-bash"><!></pre> <h3 id="keyboard-shortcuts">Keyboard Shortcuts</h3> <ul><li><code>Ctrl+C</code>: Interrupt (cancel) the current command</li> <li><code>Ctrl+D</code>: Exit the current shell</li> <li><code>Ctrl+L</code>: Clear the screen</li> <li><code>Ctrl+A</code>: Move cursor to beginning of line</li> <li><code>Ctrl+E</code>: Move cursor to end of line</li> <li><code>Ctrl+U</code>: Delete from cursor to beginning of line</li> <li><code>Ctrl+K</code>: Delete from cursor to end of line</li> <li><code>Ctrl+W</code>: Delete the word before the cursor</li> <li><code>Tab</code>: Auto-complete commands, file names, and directories</li> <li><code>Up/Down arrows</code>: Navigate through command history</li></ul> <h2 id="environment-variables">Environment Variables</h2> <p>Environment variables store information that can be used by the shell and programs.</p> <h3 id="viewing-variables">Viewing Variables</h3> <pre class="language-bash"><!></pre> <h3 id="setting-variables">Setting Variables</h3> <pre class="language-bash"><!></pre> <p>To make variables permanent, add them to your shell configuration file (e.g., <code>~/.bashrc</code> or <code>~/.zshrc</code>).</p> <h2 id="practical-examples">Practical Examples</h2> <p>Let’s put these commands together in some practical examples:</p> <h3 id="example-1-creating-a-project-structure">Example 1: Creating a Project Structure</h3> <pre class="language-bash"><!></pre> <h3 id="example-2-finding-and-replacing-text">Example 2: Finding and Replacing Text</h3> <pre class="language-bash"><!></pre> <h3 id="example-3-analyzing-log-files">Example 3: Analyzing Log Files</h3> <pre class="language-bash"><!></pre> <h3 id="example-4-monitoring-a-process">Example 4: Monitoring a Process</h3> <pre class="language-bash"><!></pre> <h2 id="command-line-tips-for-beginners">Command Line Tips for Beginners</h2> <ol><li><strong>Start small</strong>: Learn a few commands at a time and practice them</li> <li><strong>Use tab completion</strong>: Press Tab to auto-complete commands and file names</li> <li><strong>Read the manual</strong>: Use <code>man command</code> to read the manual for any command</li> <li><strong>Create aliases</strong>: Define shortcuts for commands you use frequently</li> <li><strong>Use the history</strong>: Press Up arrow to cycle through previous commands</li> <li><strong>Be careful with destructive commands</strong>: Double-check before using <code>rm</code>, especially with wildcards</li> <li><strong>Make use of –help</strong>: Most commands support <code>--help</code> flag for quick reference</li></ol> <h2 id="creating-aliases">Creating Aliases</h2> <p>Aliases are shortcuts for commands you use frequently:</p> <pre class="language-bash"><!></pre> <p>After adding aliases, run <code>source ~/.bashrc</code> (or your shell’s config file) to apply them.</p> <h2 id="customizing-your-terminal">Customizing Your Terminal</h2> <p>You can customize your terminal to make it more useful and visually appealing:</p> <ol><li><strong>Install a better shell</strong>: Consider <a href="https://www.zsh.org/" rel="nofollow">Zsh</a> with <a href="https://ohmyz.sh/" rel="nofollow">Oh My Zsh</a></li> <li><strong>Use a color theme</strong>: Many terminals support custom color schemes</li> <li><strong>Configure your prompt</strong>: Customize what information appears in your prompt</li> <li><strong>Add useful information</strong>: Show git branch, current directory, etc.</li></ol> <h2 id="conclusion">Conclusion</h2> <p>The command line is a powerful tool that becomes more valuable the more you use it. Don’t try to memorize every command at once—start with the basics and gradually expand your knowledge as you need new functionality.</p> <p>Remember these key points:</p> <ul><li>Navigation: <code>pwd</code>, <code>ls</code>, <code>cd</code></li> <li>File operations: <code>mkdir</code>, <code>touch</code>, <code>cp</code>, <code>mv</code>, <code>rm</code></li> <li>Viewing content: <code>cat</code>, <code>less</code>, <code>head</code>, <code>tail</code></li> <li>Finding things: <code>grep</code>, <code>find</code></li> <li>Redirecting output: <code>&gt;</code>, <code>&gt;&gt;</code>, <code>|</code></li></ul> <p>With these fundamentals, you’ll be well on your way to becoming proficient with the command line. As you grow more comfortable, you’ll discover that many tasks are faster and more powerful when performed in the terminal.</p> <h2 id="further-resources">Further Resources</h2> <ul><li><a href="https://linuxcommand.org/tlcl.php" rel="nofollow">The Linux Command Line</a> - A comprehensive guide</li> <li><a href="https://explainshell.com/" rel="nofollow">Explain Shell</a> - Explains command line arguments</li> <li><a href="https://www.git-tower.com/blog/command-line-cheat-sheet/" rel="nofollow">Command Line Cheat Sheet</a></li> <li><a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners" rel="nofollow">Bash Scripting Tutorial</a></li></ul>',1);function La(W){var j=_a(),t=a(wa(j),34),z=e(t);n(z,()=>'<code class="language-undefined">username@hostname:~$</code>'),s(t);var o=a(t,14),G=e(o);n(G,()=>'<code class="language-bash"><span class="token builtin class-name">pwd</span></code>'),s(o);var l=a(o,4),q=e(l);n(q,()=>'<code class="language-undefined">/home/username</code>'),s(l);var r=a(l,6),B=e(r);n(B,()=>'<code class="language-bash"><span class="token function">ls</span></code>'),s(r);var i=a(r,4),H=e(i);n(H,()=>`<code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span>    <span class="token comment"># Long format with details</span>
<span class="token function">ls</span> <span class="token parameter variable">-a</span>    <span class="token comment"># Show hidden files (those starting with .)</span>
<span class="token function">ls</span> <span class="token parameter variable">-la</span>   <span class="token comment"># Combine options for long format and hidden files</span>
<span class="token function">ls</span> <span class="token parameter variable">-lh</span>   <span class="token comment"># Human-readable file sizes</span></code>`),s(i);var c=a(i,4),N=e(c);n(N,()=>`<code class="language-undefined">drwxr-xr-x  2 username group  4096 Mar 15 14:30 Documents
-rw-r--r--  1 username group  8980 Mar 10 09:15 example.txt</code>`),s(c);var p=a(c,10),I=e(p);n(I,()=>`<code class="language-bash"><span class="token builtin class-name">cd</span> Documents            <span class="token comment"># Go to Documents folder</span>
<span class="token builtin class-name">cd</span> /home/username/Downloads  <span class="token comment"># Go to a specific path</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>                   <span class="token comment"># Go up one directory</span>
<span class="token builtin class-name">cd</span> ~                    <span class="token comment"># Go to home directory</span>
<span class="token builtin class-name">cd</span> -                    <span class="token comment"># Go to previous directory</span></code>`),s(p);var m=a(p,8),V=e(m);n(V,()=>`<code class="language-bash"><span class="token function">mkdir</span> Projects          <span class="token comment"># Create a directory</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> Projects/Web/CSS  <span class="token comment"># Create nested directories</span></code>`),s(m);var d=a(m,6),Y=e(d);n(Y,()=>`<code class="language-bash"><span class="token function">touch</span> file.txt          <span class="token comment"># Create an empty file</span>
<span class="token function">touch</span> file1.txt file2.txt  <span class="token comment"># Create multiple files</span></code>`),s(d);var u=a(d,6),$=e(u);n($,()=>`<code class="language-bash"><span class="token function">cp</span> file.txt backup.txt  <span class="token comment"># Copy a file</span>
<span class="token function">cp</span> <span class="token parameter variable">-r</span> folder newfolder  <span class="token comment"># Copy a directory and its contents</span></code>`),s(u);var h=a(u,6),Z=e(h);n(Z,()=>`<code class="language-bash"><span class="token function">mv</span> file.txt Documents/  <span class="token comment"># Move a file to another directory</span>
<span class="token function">mv</span> oldname.txt newname.txt  <span class="token comment"># Rename a file</span>
<span class="token function">mv</span> folder newlocation/  <span class="token comment"># Move a directory</span></code>`),s(h);var g=a(h,6),J=e(g);n(J,()=>`<code class="language-bash"><span class="token function">rm</span> file.txt             <span class="token comment"># Delete a file</span>
<span class="token function">rm</span> <span class="token parameter variable">-r</span> folder            <span class="token comment"># Delete a directory and its contents</span>
<span class="token function">rm</span> <span class="token parameter variable">-i</span> file.txt          <span class="token comment"># Interactive mode (asks for confirmation)</span>
<span class="token function">rm</span> <span class="token parameter variable">-f</span> file.txt          <span class="token comment"># Force deletion without confirmation</span></code>`),s(g);var f=a(g,8),K=e(f);n(K,()=>`<code class="language-bash"><span class="token function">cat</span> file.txt            <span class="token comment"># Show file contents</span>
<span class="token function">cat</span> file1.txt file2.txt <span class="token comment"># Show contents of multiple files</span></code>`),s(f);var k=a(f,6),Q=e(k);n(Q,()=>'<code class="language-bash"><span class="token function">less</span> file.txt</code>'),s(k);var b=a(k,14),X=e(b);n(X,()=>'<code class="language-undefined">-rw-r--r--  1 username group  8980 Mar 10 09:15 example.txt</code>'),s(b);var v=a(b,14),aa=e(v);n(aa,()=>`<code class="language-bash"><span class="token function">chmod</span> u+x script.sh     <span class="token comment"># Add execute permission for the owner</span>
<span class="token function">chmod</span> g+w file.txt      <span class="token comment"># Add write permission for the group</span>
<span class="token function">chmod</span> o-r file.txt      <span class="token comment"># Remove read permission for others</span>
<span class="token function">chmod</span> <span class="token number">755</span> script.sh     <span class="token comment"># Set specific permissions using octal notation</span></code>`),s(v);var w=a(v,14),ea=e(w);n(ea,()=>`<code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">></span> file.txt      <span class="token comment"># Redirect output to a file (overwrite)</span>
<span class="token builtin class-name">command</span> <span class="token operator">>></span> file.txt     <span class="token comment"># Append output to a file</span>
<span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> errors.txt   <span class="token comment"># Redirect error messages to a file</span>
<span class="token builtin class-name">command</span> <span class="token operator">></span> output.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span> errors.txt  <span class="token comment"># Redirect output and errors separately</span>
<span class="token builtin class-name">command</span> <span class="token operator">></span> output.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>  <span class="token comment"># Redirect both output and errors to the same file</span></code>`),s(w);var y=a(w,6),sa=e(y);n(sa,()=>`<code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">".txt"</span>     <span class="token comment"># List files and filter for those containing ".txt"</span>
<span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span>    <span class="token comment"># Count lines in a file</span>
<span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"git commit"</span>  <span class="token comment"># Find git commit commands in your history</span></code>`),s(y);var x=a(y,8),na=e(x);n(na,()=>`<code class="language-bash"><span class="token function">grep</span> <span class="token string">"pattern"</span> file.txt  <span class="token comment"># Search for "pattern" in file.txt</span>
<span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">"pattern"</span> file.txt  <span class="token comment"># Case-insensitive search</span>
<span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token string">"pattern"</span> directory/  <span class="token comment"># Recursive search in directory</span>
<span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">"pattern"</span> file.txt  <span class="token comment"># Show line numbers</span>
<span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"pattern"</span> file.txt  <span class="token comment"># Show lines that don't match</span></code>`),s(x);var _=a(x,6),ta=e(_);n(ta,()=>`<code class="language-bash"><span class="token function">head</span> file.txt           <span class="token comment"># Show first 10 lines</span>
<span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> file.txt      <span class="token comment"># Show first 5 lines</span>
<span class="token function">tail</span> file.txt           <span class="token comment"># Show last 10 lines</span>
<span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">20</span> file.txt     <span class="token comment"># Show last 20 lines</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> log.txt         <span class="token comment"># Follow the file (show updates in real-time)</span></code>`),s(_);var C=a(_,6),oa=e(C);n(oa,()=>`<code class="language-bash"><span class="token function">wc</span> file.txt             <span class="token comment"># Show lines, words, and characters</span>
<span class="token function">wc</span> <span class="token parameter variable">-l</span> file.txt          <span class="token comment"># Count lines only</span>
<span class="token function">wc</span> <span class="token parameter variable">-w</span> file.txt          <span class="token comment"># Count words only</span>
<span class="token function">wc</span> <span class="token parameter variable">-c</span> file.txt          <span class="token comment"># Count characters only</span></code>`),s(C);var S=a(C,6),la=e(S);n(la,()=>`<code class="language-bash"><span class="token function">sort</span> file.txt           <span class="token comment"># Sort alphabetically</span>
<span class="token function">sort</span> <span class="token parameter variable">-r</span> file.txt        <span class="token comment"># Sort in reverse</span>
<span class="token function">sort</span> <span class="token parameter variable">-n</span> file.txt        <span class="token comment"># Sort numerically</span></code>`),s(S);var T=a(S,6),ra=e(T);n(ra,()=>`<code class="language-bash"><span class="token function">sort</span> file.txt <span class="token operator">|</span> <span class="token function">uniq</span>    <span class="token comment"># Show unique lines</span>
<span class="token function">sort</span> file.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token comment"># Count occurrences of each line</span></code>`),s(T);var P=a(T,8),ia=e(P);n(ia,()=>`<code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.txt"</span>    <span class="token comment"># Find all .txt files in current directory and subdirectories</span>
<span class="token function">find</span> /home <span class="token parameter variable">-type</span> d <span class="token parameter variable">-name</span> <span class="token string">"Projects"</span>  <span class="token comment"># Find directories named "Projects"</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +1M  <span class="token comment"># Find files larger than 1 MB</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-7</span>  <span class="token comment"># Find files modified in the last 7 days</span></code>`),s(P);var M=a(P,6),ca=e(M);n(ca,()=>`<code class="language-bash"><span class="token function">which</span> python            <span class="token comment"># Show the path to the Python executable</span>
<span class="token function">which</span> <span class="token function">npm</span>               <span class="token comment"># Show the path to npm</span></code>`),s(M);var A=a(M,8),pa=e(A);n(pa,()=>`<code class="language-bash"><span class="token function">history</span>                 <span class="token comment"># Show command history</span>
<span class="token operator">!</span><span class="token number">42</span>                     <span class="token comment"># Run command number 42 from history</span>
<span class="token operator">!</span><span class="token operator">!</span>                      <span class="token comment"># Run the previous command</span>
<span class="token operator">!</span>string                 <span class="token comment"># Run the most recent command starting with "string"</span></code>`),s(A);var D=a(A,12),ma=e(D);n(ma,()=>`<code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOME</span>              <span class="token comment"># Show the value of HOME variable</span>
<span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>              <span class="token comment"># Show the PATH variable (where commands are searched)</span>
<span class="token function">env</span>                     <span class="token comment"># List all environment variables</span></code>`),s(D);var F=a(D,4),da=e(F);n(da,()=>`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"John"</span>      <span class="token comment"># Set a variable for the current session</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$NAME</span>              <span class="token comment"># Use the variable</span></code>`),s(F);var L=a(F,10),ua=e(L);n(ua,()=>`<code class="language-bash"><span class="token comment"># Create a new web project</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> my-project/<span class="token punctuation">&#123;</span>css,js,images<span class="token punctuation">&#125;</span>
<span class="token function">touch</span> my-project/index.html
<span class="token function">touch</span> my-project/css/style.css
<span class="token function">touch</span> my-project/js/script.js
<span class="token builtin class-name">echo</span> <span class="token string">"&lt;!DOCTYPE html>&lt;html>&lt;head>&lt;title>My Project&lt;/title>&lt;/head>&lt;body>&lt;h1>Hello World&lt;/h1>&lt;/body>&lt;/html>"</span> <span class="token operator">></span> my-project/index.html</code>`),s(L);var R=a(L,4),ha=e(R);n(ha,()=>`<code class="language-bash"><span class="token comment"># Find all JavaScript files containing "function" and replace "var" with "let"</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.js"</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-exec</span> <span class="token function">grep</span> <span class="token parameter variable">-l</span> <span class="token string">"function"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation"></span><span class="token punctuation">;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/var /let /g'</span></code>`),s(R);var E=a(R,4),ga=e(E);n(ga,()=>`<code class="language-bash"><span class="token comment"># Count occurrences of each HTTP status code in an Apache log</span>
<span class="token function">grep</span> <span class="token parameter variable">-o</span> <span class="token string">"HTTP/1.1<span class="token entity" title="&quot;">"</span> [0-9]&#123;3&#125;"</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span></code>`),s(E);var O=a(E,4),fa=e(O);n(fa,()=>`<code class="language-bash"><span class="token comment"># Watch the CPU and memory usage of a specific process</span>
<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token string">"ps aux | grep [n]odejs"</span></code>`),s(O);var U=a(O,10),ka=e(U);n(ka,()=>`<code class="language-bash"><span class="token comment"># Add to your ~/.bashrc or ~/.zshrc</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -la'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gs</span><span class="token operator">=</span><span class="token string">'git status'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gp</span><span class="token operator">=</span><span class="token string">'git push'</span></code>`),s(U),ya(22),va(W,j)}export{La as default,xa as metadata};
