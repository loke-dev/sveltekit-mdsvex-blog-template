---
title: "Implementing OAuth Authentication with Supabase in SvelteKit"
description: "A comprehensive guide to setting up OAuth authentication with Supabase in a SvelteKit application, including troubleshooting common issues and best practices."
date: "2023-07-10"
published: true
---

# Implementing OAuth Authentication with Supabase in SvelteKit

Authentication is a critical component of modern web applications, and implementing it correctly can be challenging. In this post, I'll walk through setting up OAuth authentication with Supabase in a SvelteKit application, sharing the lessons I learned along the way.

## Why Supabase for Authentication?

[Supabase](https://supabase.com/) provides a powerful, open-source alternative to Firebase with a generous free tier. Its authentication system supports multiple providers out of the box, including email/password, magic links, and OAuth providers like GitHub and Google.

For SvelteKit applications, Supabase is particularly appealing because:

1. It's easy to integrate with SvelteKit's server-side rendering
2. It provides real-time subscriptions for database changes
3. It has excellent TypeScript support
4. The authentication flow works well with SvelteKit's routing system

## Setting Up Supabase

First, you'll need to create a Supabase project and configure your OAuth providers. Here's how:

1. Create a new project in the [Supabase dashboard](https://app.supabase.com/)
2. Navigate to Authentication â†’ Providers
3. Enable the OAuth providers you want to use (GitHub, Google, etc.)
4. Configure each provider with the appropriate credentials

For GitHub, you'll need to:
- Create a new OAuth app in your GitHub settings
- Set the callback URL to `https://your-domain.com/auth/callback`
- Copy the Client ID and Client Secret to Supabase

For Google, you'll need to:
- Create a new project in the Google Cloud Console
- Configure the OAuth consent screen
- Create OAuth credentials
- Set the authorized redirect URI to `https://your-domain.com/auth/callback`
- Copy the Client ID and Client Secret to Supabase

## Integrating Supabase with SvelteKit

### 1. Install the Supabase JS Client

```bash
npm install @supabase/supabase-js
```

### 2. Create a Supabase Client

Create a file at `src/lib/supabase.ts`:

```typescript
import { createClient } from "@supabase/supabase-js";
import { SUPABASE_URL, SUPABASE_ANON_KEY } from "$lib/env";

// Create the Supabase client
export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
```

### 3. Set Up Environment Variables

Create an environment variables file at `src/lib/env.ts`:

```typescript
import { browser } from "$app/environment";

// Helper function to safely get environment variables with fallbacks
function getEnv(key: string, fallback: string): string {
  if (browser) {
    return (import.meta.env[key] as string) || fallback;
  }
  return process.env[key] || fallback;
}

export const SUPABASE_URL = getEnv(
  "PUBLIC_SUPABASE_URL",
  "https://your-project.supabase.co"
);

export const SUPABASE_ANON_KEY = getEnv(
  "PUBLIC_SUPABASE_ANON_KEY",
  "your-anon-key"
);
```

### 4. Configure SvelteKit Hooks

Create a file at `src/hooks.server.ts`:

```typescript
import { createClient } from "@supabase/supabase-js";
import type { Handle } from "@sveltejs/kit";
import { SUPABASE_URL, SUPABASE_ANON_KEY } from "$lib/env";

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

  event.locals.getSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession();
    return session;
  };

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === "content-range";
    },
  });
};
```

### 5. Set Up the Layout Files

Create a file at `src/routes/+layout.server.ts`:

```typescript
import type { LayoutServerLoad } from "./$types";

export const load: LayoutServerLoad = async ({ locals: { getSession } }) => {
  return {
    session: await getSession(),
  };
};
```

Create a file at `src/routes/+layout.ts`:

```typescript
import { invalidate } from "$app/navigation";
import { supabase } from "$lib/supabase";
import { browser } from "$app/environment";

// Disable prerendering for routes that need dynamic session data
export const prerender = false;

export const load = async ({ data, depends }) => {
  // Register a dependency on the auth state
  depends('supabase:auth');

  const { session } = data;

  if (browser) {
    // Set up auth state change listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, newSession) => {
      console.log('Auth state changed:', event);

      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED' || event === 'SIGNED_OUT') {
        console.log('Invalidating auth data');
        await invalidate('supabase:auth');
      }
    });

    // Return cleanup function
    return {
      session,
      cleanup: () => {
        subscription.unsubscribe();
      }
    };
  }

  return { session };
};
```

### 6. Create an Auth Component

Create a file at `src/lib/components/Auth.svelte`:

```svelte
<script lang="ts">
  import { supabase } from '$lib/supabase';
  import { page } from '$app/stores';
  import { onMount } from 'svelte';

  let loading = false;
  let error: string | null = null;
  let debugInfo = '';

  onMount(() => {
    // Check if we have a session on mount
    if ($page.data.session) {
      debug(`Already signed in as ${$page.data.session.user.email}`);
    } else {
      debug('Not signed in');
    }
  });

  // Debug function to help troubleshoot
  function debug(message: string) {
    console.log(`[Auth Debug] ${message}`);
    debugInfo += `${message}\n`;
  }

  async function signInWithGithub() {
    loading = true;
    error = null;
    debug('Starting GitHub sign in...');

    try {
      const redirectUrl = `${window.location.origin}/auth/callback?next=${encodeURIComponent(window.location.pathname)}`;
      debug(`Redirect URL: ${redirectUrl}`);

      const { data, error: signInError } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: redirectUrl
        }
      });

      if (signInError) {
        error = signInError.message;
        debug(`GitHub sign in error: ${signInError.message}`);
      } else if (data && data.url) {
        debug(`Got OAuth URL: ${data.url}`);
        // Force a hard redirect to the OAuth provider
        window.location.href = data.url;
      } else {
        debug('No URL returned from signInWithOAuth');
        error = 'No URL returned from GitHub OAuth';
      }
    } catch (e) {
      debug(`GitHub sign in exception: ${e instanceof Error ? e.message : String(e)}`);
      error = e instanceof Error ? e.message : 'An unknown error occurred';
    } finally {
      loading = false;
    }
  }

  async function signInWithGoogle() {
    loading = true;
    error = null;
    debug('Starting Google sign in...');

    try {
      const redirectUrl = `${window.location.origin}/auth/callback?next=${encodeURIComponent(window.location.pathname)}`;
      debug(`Redirect URL: ${redirectUrl}`);

      const { data, error: signInError } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: redirectUrl
        }
      });

      if (signInError) {
        error = signInError.message;
        debug(`Google sign in error: ${signInError.message}`);
      } else if (data && data.url) {
        debug(`Got OAuth URL: ${data.url}`);
        // Force a hard redirect to the OAuth provider
        window.location.href = data.url;
      } else {
        debug('No URL returned from signInWithOAuth');
        error = 'No URL returned from Google OAuth';
      }
    } catch (e) {
      debug(`Google sign in exception: ${e instanceof Error ? e.message : String(e)}`);
      error = e instanceof Error ? e.message : 'An unknown error occurred';
    } finally {
      loading = false;
    }
  }

  async function signOut() {
    loading = true;
    debug('Starting sign out...');
    try {
      const { error: signOutError } = await supabase.auth.signOut();

      if (signOutError) {
        error = signOutError.message;
        debug(`Sign out error: ${signOutError.message}`);
      } else {
        debug('Sign out successful');
      }
    } catch (e) {
      debug(`Sign out exception: ${e instanceof Error ? e.message : String(e)}`);
      error = e instanceof Error ? e.message : 'An unknown error occurred';
    } finally {
      loading = false;
    }
  }
</script>

{#if $page.data.session}
  <div class="flex flex-col items-start gap-4">
    <div class="flex items-center gap-2">
      {#if $page.data.session.user?.user_metadata?.avatar_url}
        <img
          src={$page.data.session.user.user_metadata.avatar_url}
          alt="Avatar"
          class="w-8 h-8 rounded-full"
        />
      {/if}
      <span>Signed in as {$page.data.session.user?.email || 'User'}</span>
    </div>
    <button
      on:click={signOut}
      disabled={loading}
      class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50"
    >
      {loading ? 'Signing out...' : 'Sign out'}
    </button>
  </div>
{:else}
  <div class="flex flex-col gap-4">
    <h3 class="text-lg font-medium">Sign in to continue</h3>
    {#if error}
      <div class="p-3 text-sm text-red-700 bg-red-100 rounded-md">
        {error}
      </div>
    {/if}

    <div class="flex flex-col gap-2">
      <button
        on:click={signInWithGithub}
        disabled={loading}
        class="flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-white bg-gray-800 rounded-md hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:opacity-50"
      >
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd" />
        </svg>
        {loading ? 'Signing in...' : 'Sign in with GitHub'}
      </button>

      <button
        on:click={signInWithGoogle}
        disabled={loading}
        class="flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
      >
        <svg class="w-5 h-5" viewBox="0 0 24 24">
          <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4" />
          <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853" />
          <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05" />
          <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335" />
        </svg>
        {loading ? 'Signing in...' : 'Sign in with Google'}
      </button>
    </div>
  </div>
{/if}
```

### 7. Create the Auth Callback Route

Create a file at `src/routes/auth/callback/+page.server.ts`:

```typescript
import { redirect } from '@sveltejs/kit';
import type { RequestEvent } from '@sveltejs/kit';
import { supabase } from '$lib/supabase';

export const load = async ({ url }: RequestEvent) => {
  const code = url.searchParams.get('code');
  // Get the next parameter, defaulting to the current page if not provided
  const next = url.searchParams.get('next') || '/';

  console.log('Auth callback received, code present:', !!code);
  console.log('Will redirect to:', next);

  if (code) {
    try {
      const { data, error } = await supabase.auth.exchangeCodeForSession(code);

      if (error) {
        console.error('Error exchanging code for session:', error);
      } else {
        console.log('Successfully exchanged code for session');
        if (data?.session) {
          console.log('User authenticated:', data.session.user.email);
        }
      }
    } catch (error) {
      console.error('Error exchanging code for session:', error);
    }
  }

  // Redirect to the next page with a cache-busting parameter to force a refresh
  const redirectUrl = new URL(next, url.origin);
  redirectUrl.searchParams.set('auth_time', Date.now().toString());

  throw redirect(303, redirectUrl.toString());
};
```

Create a file at `src/routes/auth/callback/+page.svelte`:

```svelte
<script>
  import { onMount } from 'svelte';
  import { page } from '$app/stores';

  let message = 'Processing authentication...';
  let countdown = 5;
  let redirectUrl = '/';

  onMount(() => {
    // Log the URL for debugging
    console.log('Auth callback URL:', window.location.href);

    // Get the next parameter from the URL
    const urlParams = new URLSearchParams(window.location.search);
    const next = urlParams.get('next');
    if (next) {
      redirectUrl = next;
      console.log('Will redirect to:', redirectUrl);
    }

    // Check if there's an error in the URL
    const error = urlParams.get('error');
    const errorDescription = urlParams.get('error_description');

    if (error) {
      message = `Authentication error: ${errorDescription || error}`;
      console.error('Auth error:', error, errorDescription);
    }

    // Countdown timer
    const interval = setInterval(() => {
      countdown--;
      if (countdown <= 0) {
        clearInterval(interval);
        message = `Redirecting to ${redirectUrl}...`;

        // Add a cache-busting parameter to force a refresh
        const url = new URL(redirectUrl, window.location.origin);
        url.searchParams.set('auth_time', Date.now().toString());

        window.location.href = url.toString();
      }
    }, 1000);

    return () => {
      clearInterval(interval);
    };
  });
</script>

<div class="flex items-center justify-center min-h-screen bg-gray-100">
  <div class="p-8 bg-white rounded-lg shadow-md text-center">
    <h1 class="text-2xl font-bold mb-4">Authentication</h1>
    <p class="mb-4">{message}</p>
    <div class="w-12 h-12 border-t-4 border-blue-500 border-solid rounded-full animate-spin mx-auto"></div>
    <p class="mt-4 text-sm text-gray-500">
      Redirecting in {countdown} seconds...
      <br>
      If you are not redirected automatically, <a href={redirectUrl} class="text-blue-500 hover:underline">click here</a>.
    </p>
  </div>
</div>
```

## Common Issues and Solutions

### 1. OAuth Buttons Not Responding

If your OAuth buttons appear to be clickable but nothing happens when clicked, check for:

- JavaScript errors in the browser console
- Network issues or CORS errors
- Missing environment variables
- Incorrect Supabase configuration

Solution: Add detailed logging to your authentication functions and check the browser console for errors.

### 2. Redirect After Authentication Not Working

If the user is successfully authenticated but not redirected back to the original page:

Solution: Pass the current page URL as a `next` parameter in the redirect URL:

```typescript
const redirectUrl = `${window.location.origin}/auth/callback?next=${encodeURIComponent(window.location.pathname)}`;
```

### 3. Session Not Persisting Between Pages

If the user is authenticated but the session is lost when navigating between pages:

Solution: Disable prerendering for routes that need dynamic session data and use the `depends` function to track auth state changes:

```typescript
// Disable prerendering for routes that need dynamic session data
export const prerender = false;

export const load = async ({ data, depends }) => {
  // Register a dependency on the auth state
  depends('supabase:auth');

  // Rest of the code...
};
```

### 4. Session Not Updating After Login

If the user successfully logs in but the UI doesn't update to reflect the authenticated state:

Solution: Add a cache-busting parameter to the redirect URL:

```typescript
const redirectUrl = new URL(next, url.origin);
redirectUrl.searchParams.set('auth_time', Date.now().toString());
```

## Best Practices

1. **Always handle errors gracefully**: Provide clear error messages to users when authentication fails.

2. **Use the `onAuthStateChange` event**: This ensures your UI stays in sync with the authentication state.

3. **Implement proper redirects**: Always redirect users back to the page they were on before authentication.

4. **Add detailed logging**: This helps with debugging authentication issues.

5. **Secure your routes**: Use server-side checks to protect routes that require authentication.

6. **Keep sensitive information server-side**: Never expose API keys or secrets in client-side code.

## Conclusion

Setting up OAuth authentication with Supabase in a SvelteKit application can be challenging, but with the right approach, it provides a seamless user experience. By following the steps and best practices outlined in this post, you can implement a robust authentication system that supports multiple providers and handles edge cases gracefully.

Remember that authentication is a critical security component of your application, so take the time to test thoroughly and handle all potential error cases.

Happy coding!